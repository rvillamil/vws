<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<name>VWS:Video websites scraper</name>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.2.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<groupId>es.rvp.web.vws</groupId>
	<artifactId>vws</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- The spring-boot-starter-parent chooses fairly conservative Java compatibility. 
			If you want to follow our recommendation and use a later Java version you 
			can add a java.version property: -->
		<java.version>1.8</java.version>
		<start-class>es.rvp.web.vws.Application</start-class>
		<lombok.version>1.14.8</lombok.version>
		<docker.maven.plugin.version>0.20.1</docker.maven.plugin.version>
		<!-- Only unit tests are run by default. -->
		<skip.integration.tests>true</skip.integration.tests>
		<skip.unit.tests>false</skip.unit.tests>
		<!-- Docker image/containers name -->
		<docker.tomcat.img.name>img-vws-tomcat:${project.version}</docker.tomcat.img.name>
		<docker.vws.backend.name>img-vws-resources:${project.version}</docker.vws.backend.name>
	</properties>

	<dependencyManagement>
		<dependencies>

			<dependency>
				<groupId>org.jsoup</groupId>
				<artifactId>jsoup</artifactId>
				<version>1.9.1</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- Starters are a set of convenient dependency descriptors that you can 
			include in your application. You get a one-stop-shop for all the Spring and 
			related technology that you need, without having to hunt through sample code 
			and copy paste loads of dependency descriptors http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#using-boot-starter -->

		<!-- Add typical dependencies for a web application -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- To build a war file that is both executable and deployable into an 
			external container you need to mark the embedded container dependencies as 
			“provided”. More info in: http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Starter for testing Spring Boot applications with libraries including 
			JUnit, Hamcrest and Mockito -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Utilities -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- LOG4J2 Framework -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>

		<!-- Spring Boot includes an additional set of tools that can make the 
			application development experience a little more pleasant. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

	</dependencies>


	<!-- Testing support -->
	<build>
		<plugins>
			<!-- The Surefire Plugin is used during the test phase of the build lifecycle 
				to execute the unit tests of an application. It generates reports in two 
				different file formats: txt y XML -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skipTests>${skip.unit.tests}</skipTests>
					<excludes>
						<exclude>**/*IT.java</exclude>
						<exclude>**/*IntegrationTest.java</exclude>
					</excludes>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>integration-test</goal>
						</goals>
						<configuration>
							<!-- Skips integration tests if the value of skip.integration.tests 
								property is true -->
							<skipTests>${skip.integration.tests}</skipTests>
							<includes>
								<include>**/*IT.java</include>
								<include>**/*IntegrationTest.java</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>

	</build>

	<modules>
		<module>vws-docker-support</module>
		<module>vws-persistence</module>
		<module>vws-services</module>
		<module>vws-resources</module>
	</modules>

</project>
